// This is your main database schema file: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User table for storing basic user information
model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  password      String
  sessions      Session[]
  expenses      Expense[]
  incomes       Income[]
  categories    Category[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("users")  // Map model to lowercase plural table name
}

// Session table for managing user sessions (multiple device logins)
model Session {
  id            Int         @id @default(autoincrement())
  userId        Int
  token         String      @unique
  device        String      // Field to store device identifier
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")  // Map model to lowercase plural table name
}

// Expense table for tracking user expenses
model Expense {
  id            Int         @id @default(autoincrement())
  userId        Int
  categoryId    Int?        // Make categoryId optional
  amount        Float
  recordDate DateTime 
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  description   String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("expenses")  // Map model to lowercase plural table name
}

// Income table for tracking user income records
model Income {
  id            Int         @id @default(autoincrement())
  userId        Int
  recordDate DateTime
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  description   String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incomes")  // Map model to lowercase plural table name
}

// Category table for categorizing both income and expenses
model Category {
  id        Int       @id @default(autoincrement())
  userId    Int       // Foreign key to associate category with a user
  name      String
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])  // Ensure unique category names per user
  @@map("categories")
}