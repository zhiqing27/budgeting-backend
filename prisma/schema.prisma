// This is your main database schema file: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User table for storing basic user information
model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  password      String
  sessions      Session[]
  expenses      Expense[]
  incomes       Income[]
  categories    Category[]
  budgets       Budget[]
  budgetGoal    BudgetGoal[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("users")  // Map model to lowercase plural table name
}

// Session table for managing user sessions (multiple device logins)
model Session {
  id            Int         @id @default(autoincrement())
  userId        Int
  token         String      @unique
  device        String      // Field to store device identifier
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")  // Map model to lowercase plural table name
}

// Expense table for tracking user expenses
model Expense {
  id            Int         @id @default(autoincrement())
  userId        Int
  categoryId    Int?        // Make categoryId optional
  amount        Float
  recordDate DateTime 
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  description   String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
   @@index([userId, recordDate])
  @@map("expenses")  // Map model to lowercase plural table name
}

// Income table for tracking user income records
model Income {
  id            Int         @id @default(autoincrement())
  userId        Int
  recordDate DateTime
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  description   String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incomes")  // Map model to lowercase plural table name
}

// Category tables

model Category {
  id        Int       @id @default(autoincrement())
  userId    Int       // Foreign key to associate category with a user
  name      String    // Name of the category (e.g., Food, Travel)
  expenses  Expense[] // A category can have multiple expenses associated with it
  budgets   Budget[]  // A category can have multiple budgets associated with it
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])  // Ensure unique category names per user
  @@map("categories")  // Map model to lowercase plural table name
}

model Budget {
  id           Int       @id @default(autoincrement())
  userId       Int
  categoryId   Int?      // Make categoryId optional for budgets that are not category-specific
  amount       Float     // Budget amount for the user or category
  recordDate   DateTime  // Store the date when the budget is created or updated
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  budgetAlert      Boolean
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  remind_at  DateTime?
  @@map("budgets") // Map model to lowercase plural table name
}
model BudgetGoal {
  id           Int              @id @default(autoincrement())
  userId       Int
  type         String           // E.g., "saving" or "spending"
  targetAmount Float            // Target amount to save or spend
  progress     Float            // Current progress toward the goal
  targetDate   DateTime?        // Optional date for achieving the goal
  isComplete   Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs         BudgetGoalLog[]
  @@map("budgetGoal") 
}
model BudgetGoalLog {
  id           Int       @id @default(autoincrement())
  goalId       Int       // Reference to BudgetGoal
  amount       Float     // Amount added in this entry
  createdAt    DateTime  @default(now()) // Date of the contribution

  goal         BudgetGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
    @@map("budgetGoalLogs") 
}
